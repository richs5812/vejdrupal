<?php

/**
 * @file
 * Implementation of photos.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\Access\AccessInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\file\Entity\File;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * Photos access checks for different operations.
 *
 * @param $op
 *   Operation to check access.
 * @param $value
 *   $node, $user, $file->id() OR $node->id().
 *
 * @return bool
 *   TRUE if user is allowed access content, otherwise FALSE.
 */
function _photos_access($op, $value) {
  $user = \Drupal::currentUser();
  switch ($op) {
    case 'viewUser':
      return ($value->id() && $value->hasPermission('create photo') || \Drupal::currentUser()->hasPermission('access user profiles') && \Drupal::currentUser()->hasPermission('view photo'));
    case 'imageOrig':
      if (!\Drupal::currentUser()->hasPermission('view original')) return FALSE;
    case 'imageView':
      // Value is fid, check if user can view this photo's album.
      if ($user->id() == 1) return TRUE;
      if (\Drupal::config('photos.settings')->get('photos_access_photos')) {
        // Check if album password is required.
        photos_access_request_album_password();
        $node = _photos_access_pass_type($value, 1);
        $uid = FALSE;
        // Check if user is node author.
        if (isset($node['node'])) {
          $uid = $node['node']->uid;
        }
        elseif (isset($node['view'])) {
          $uid = $node['view']->uid;
        }
        if ($uid && $user->id() == $uid) {
          return TRUE;
        }
        if (isset($node['node']->viewid) && $node['node']->viewid <> 3) {
          // Check node access.
          $node = \Drupal\node\Entity\Node::load($node['node']->nid);
          return $node->access('view');
        }
        elseif (isset($node['view']->pass)) {
          // Check password.
          if (isset($_SESSION[$node['view']->nid . '_' . session_id()]) && $node['view']->pass == $_SESSION[$node['view']->nid . '_' . session_id()] || !photos_access_pass_validate($node)) {
            return TRUE;
          }
        }
        else {
          return \Drupal::currentUser()->hasPermission('view photo');
        }
      }
      else {
        return \Drupal::currentUser()->hasPermission('view photo');
      }
    break;
    case 'album':
      if (\Drupal::config('photos.settings')->get('photos_access_photos')) {
        // Check if album password is required.
        photos_access_request_album_password();
      }
      return ($value->getType() == 'photos') && $value->access('view');
    case 'subAlbum':
      return \Drupal::config('photos.settings')->get('photos_node_' . $value->getType()) && $value->access('view');
    case 'editAlbum':
      if ($value->getType() == 'photos') {
        return $value->access('update');
      }
      else {
        return (\Drupal::config('photos.settings')->get('photos_node_' . $value->getType()) && $value->access('update'));
      }
    case 'imageEdit':
      if (!is_object($value)) {
        $query = db_select('node', 'n');
        $query->join('photos_image', 'p', 'p.pid = n.nid');
        $query->fields('n', array('nid'))
          ->condition('p.fid', $value);
        $nid = $query->execute()->fetchField();
        if ($nid) {
          $value = \Drupal::entityManager()->getStorage('node')->load($nid);
        }
        else {
          // Not found.
          throw new NotFoundHttpException();
          return FALSE;
        }
      }
      return $value->access('update') || $value->access('delete');
    case 'imageDelete':
      if (!is_object($value)) {
        $query = db_select('node', 'n');
        $query->join('photos_image', 'p', 'p.pid = n.nid');
        $query->fields('n', array('nid'))
          ->condition('p.fid', $value);
        $nid = $query->execute()->fetchField();
        $value = \Drupal::entityManager()->getStorage('node')->load($nid);
      }
      return $value->access('delete');
  }
}

/**
 * Implements hook_photos_access().
 */
function photos_photos_access() {
  if (\Drupal::config('photos.settings')->get('photos_access_photos')) {
    $current_path = \Drupal::service('path.current')->getPath();
    $path_args = explode('/', $current_path);
    if (isset($path_args[3]) && $path_args[1] == 'photos' && $path_args[2] <> 'get' && is_numeric($path_args[3])) {
      switch ($path_args[2]) {
        case 'album':
        case 'sub-album':
        case 'zoom':
        case 'sub-slide':
          return array($path_args[3]);
        case 'image':
          $nid = db_query("SELECT pid FROM {photos_image} WHERE fid = :fid", array(':fid' => $path_args[3]))->fetchField();
          return array($nid);
      }
    }
    if (isset($path_args[4]) && $path_args[1] == 'photos' && $path_args[2] == 'data' && is_numeric($path_args[4])) {
      return array($path_args[4]);
    }
  }
}

/**
 * Ajax helper, perform different ajax requests.
 */
function _photos_ajax_helper($action) {
  // @todo convert to CommandInterface class.
  switch ($action) {
    case 'sort':
      $nid = isset($_POST['pid']) ? $_POST['pid'] : 0;
      $uid = isset($_POST['uid']) ? $_POST['uid'] : 0;
      $type = isset($_POST['type']) ? $_POST['type'] : 0;
      $new_order = isset($_POST['order']) ? $_POST['order'] : array();
      // @todo ...
      module_load_include('inc', 'photos', 'inc/photos.edit');
      $message = '';
      if (!empty($new_order) && is_array($new_order)) {
        if ($type == 'images') {
          if ($nid) {
            $message = photos_edit_sort_save($new_order, $nid);
          }
        }
        elseif ($type == 'albums') {
          if ($uid) {
            // Save sort order for albums.
            $message = photos_edit_sort_albums_save($new_order, $uid);
          }
        }
        elseif ($type == 'sub_album') {
            // Save sort order for images in sub-albums.
          if ($nid) {
            $message = photos_edit_sort_subalbums_save($new_order, $nid);
          }
        }
      }
      print $message;
      drupal_exit();
    break;
  }
  // If no action is set go to front page.
  $redirect_url = Url::fromRoute('<front>')->toString();
  return new RedirectResponse($redirect_url);
}

/**
 * Photos page title.
 */
function photos_page_title($account, $str) {
  // @todo move to controller or handler.
  $user = \Drupal::currentUser();
  if ($account->id() <> $user->id()) {
    return t('@name\'s !str', array('@name' => $account->name, '!str' => $str));
  }
  else {
    return t('My !str', array('!str' => $str));
  }
}

/**
 * Implements hook_file_download().
 */
function photos_file_download($uri) {
  if (strpos($uri, '/photos/')) {
    if (strpos($uri, '/tmp_images/')) {
      $pathinfo = pathinfo($uri);
      $ext = $pathinfo['extension'];
      $filename = $pathinfo['filename'];
      $fid = str_replace('.' . $ext, '', $filename);
      $fid = str_replace('image_', '', $fid);
      // Check photos access.
      if (!_photos_access('imageView', $fid)) {
        \Drupal::logger('photos')->notice('Private file access denied imageView for file id:%fid.', array('%fid' => $fid));
        // Access to the file is denied.
        return -1;
      }
      // Load image.
      $image = \Drupal::service('image.factory')->get($uri);
      if ($image->isValid()) {
        return array(
          // Send headers describing the image's size, and MIME-type.
          'Content-Type' => $image->getMimeType(),
          'Content-Length' => $image->getFileSize(),
          'Cache-Control' => 'private'
        );
      }
    }
    else {
      // Load file.
      $files = entity_load_multiple_by_properties('file', array('uri' => $uri));
      if (count($files)) {
        foreach ($files as $item) {
          // Since some database servers sometimes use a case-insensitive comparison
          // by default, double check that the filename is an exact match.
          if ($item->getFileUri() === $uri) {
            $file = $item;
            break;
          }
        }
      }

      // Check file.
      if (!isset($file)) {
        return;
      }

      // Check file usage.
      $photos_usage = db_query("SELECT id FROM {file_usage} WHERE module = 'photos' AND fid = :fid",
        array(':fid' => $file->id()))->fetchField();
      if ($photos_usage) {
        // Check photos access.
        if (!_photos_access('imageView', $file->id())) {
          \Drupal::logger('photos')->notice('Private file access denied imageView for file id:%fid.', array('%fid' => $file->id()));
          // Access to the file is denied.
          return -1;
        }

        // Access is granted.
        $headers = file_get_content_headers($file);
        $headers['Cache-Control'] = 'private';
        return $headers;
      }
    }
  }
}

/**
 * Implements hook_node_access().
 */
function photos_node_access(NodeInterface $node, $op, AccountInterface $account) {
  // Check user access.
  switch ($op) {
    case 'create':
      return AccessResult::allowedIfHasPermission($account, 'create photo');

    case 'update':
      if ($account->hasPermission('edit any photo') || ($account->hasPermission('edit own photo') && ($account->id() == $node->getOwnerId()))) {
        return AccessResult::allowed()->cachePerPermissions();
      }

    case 'delete':
      if ($account->hasPermission('delete any photo') || ($account->hasPermission('delete own photo') && ($account->id() == $node->getOwnerId()))) {
        return AccessResult::allowed()->cachePerPermissions();
      }

    default:
      // No opinion.
      return AccessResult::neutral();
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function photos_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // @todo re-work this code.
  // var_dump($form_state);
  $node = $form_state->getFormObject()->getEntity();
  if ($node->getType() == 'photos') {
    require_once('inc/photos.form.inc');
    $form += _photos_form($node);
    // Make sure $node->album data is saved.
    $form['#entity_builders'][] = 'photos_node_builder';
  }
}

/**
 * Entity form builder to add the book information to the node.
 *
 * @todo: Remove this in favor of an entity field.
 */
function photos_node_builder($entity_type, NodeInterface $entity, &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if (!$form_state->isValueEmpty('album')) {
    $entity->album = $form_state->getValue('album');
  }
}

/**
 * Implements hook_ENTITY_TYPE_load().
 */
function photos_node_load($nodes) {
  $info = array();

  foreach ($nodes as $nid => $node) {
    if ($node->getType() == 'photos') {
      $query = db_select('photos_album')
        ->fields('photos_album')
        ->condition('pid', $node->id());
      $result = $query->execute();
      foreach ($result as $a) {
        if ($a->pid) {
          // Check if album data is corrupt to prevent unserialize notice.
          // @todo cleanup remove?
          if ($a->data <> 'N;') $info['album'] = unserialize($a->data);
          $info['album']['pid'] = $a->pid;
          $info['album']['count'] = $a->count;
          if ($a->fid && ($image = db_query('SELECT * FROM {file_managed} WHERE fid = :fid', array(':fid' => $a->fid))->fetchObject())) {
            $image = photos_get_info(0, $image);
            $info['album']['cover']['fid'] = $a->fid;
            $info['album']['cover']['url'] = $image->uri;
            $title = \Drupal\Component\Utility\SafeMarkup::checkPlain($node->getTitle());
            $style_name = \Drupal::config('photos.settings')->get('photos_cover_imagesize') ?: 'thumbnail';
            $variables = array(
              'style_name' => $style_name,
              'uri' => $image->uri,
            );

            // The image.factory service will check if our image is valid.
            $image_info = \Drupal::service('image.factory')->get($image->uri);
            if ($image_info->isValid()) {
              $variables['width'] = $image_info->getWidth();
              $variables['height'] = $image_info->getHeight();
            }
            else {
              $variables['width'] = $variables['height'] = NULL;
            }

            $cover_render_array = array(
              '#theme' => 'image_style',
              '#width' => $variables['width'],
              '#height' => $variables['height'],
              '#style_name' => $variables['style_name'],
              '#uri' => $variables['uri'],
              '#title' => $title,
              '#alt' => $title
            );
            $image->href = Url::fromUri('base:photos/album/' . $node->id())->toString();
            $cover_render_array = array(
              '#theme' => 'photos_image_html',
              '#image' => $image,
              '#style_name' => $variables['style_name']
            );
            $cover_view = $cover_render_array;

            $url = Url::fromUri('base:photos/album/' . $node->id());

            // $album_cover_view = \Drupal::service('renderer')->renderPlain($cover_render_array);
            $info['album']['cover']['view'] = $cover_view;
          }
          else {
            $query = db_select('file_managed', 'f');
            $query->join('photos_image', 'p', 'p.fid = f.fid');
            $query->fields('f');
            $query->condition('p.pid', $node->id());
            $image = $query->execute()->fetchObject();
            if (isset($image->fid)) {
              $image = photos_get_info($image->fid, $image);
              $thumb = \Drupal::config('photos.settings')->get('photos_display_list_imagesize');
              $info['album']['cover']['url'] = $image->uri;
              $info['album']['cover']['fid'] = $image->fid;
              $title = \Drupal\Component\Utility\SafeMarkup::checkPlain($node->getTitle());
              $image->href = Url::fromUri('base:photos/album/' . $node->id())->toString();
              // Render array for album cover.
              $style_name = \Drupal::config('photos.settings')->get('photos_cover_imagesize') ?: 'thumbnail';
              $cover_view = array(
                '#theme' => 'photos_image_html',
                '#image' => $image,
                '#style_name' => $style_name
              );

              $url = Url::fromUri('base:photos/album/' . $node->id());
              $info['album']['cover']['view'] = $cover_view;

            }
          }
          $nodes[$nid]->album = $info['album'];
        }
      }
    }

    // Sub-album.
    if (\Drupal::config('photos.settings')->get('photos_node_' . $node->getType())) {
      $query = db_select('photos_count', 'c')
        ->fields('c', array('cid', 'value'))
        ->condition('c.cid', $node->id())
        ->condition('c.type', 'node_node');
      $result = $query->execute();
      foreach ($result as $photo) {
        if ($photo->cid) {
          $nodes[$nid]->subalbum['count'] = $photo->value;
        }
      }
    }

  }
}


/**
 * Implements hook_ENTITY_TYPE_view().
 */
function photos_node_view(array &$build, EntityInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  if ($node->getType() == 'photos') {
    $user = \Drupal::currentUser();
    $display_types = array('none', 'cover', 'thumbnails', 'coverthumbs');
    switch ($view_mode) {
      case 'full':
        $default_display = \Drupal::config('photos.settings')->get('photos_display_page_display');
        $display = isset($node->album['page_display']) ? $node->album['page_display'] : $default_display;
        $album = _photos_node_view($node, $display, $view_mode);
        $build['photos_album-' . $display_types[$display]] = $album;
      break;
      case 'teaser':
        $default_display = \Drupal::config('photos.settings')->get('photos_display_teaser_display');
        $display = isset($node->album['teaser_display']) ? $node->album['teaser_display'] : $default_display;
        $album = _photos_node_view($node, $display, $view_mode);
        $build['photos_album-' . $display_types[$display]] = $album;
      break;
    }
  }
}

/**
 * Implements hook_node_links_alter();
 */
function photos_node_links_alter(array &$links, NodeInterface $node, array &$context) {
  // Add node link(s).
  $node_type = $node->getType();
  $is_sub_album = \Drupal::config('photos.settings')->get('photos_node_' . $node_type);
  if ($node_type == 'photos' || $is_sub_album) {
    // Links.
    $node_links = array();
    if (\Drupal::currentUser()->hasPermission('view photo') && (isset($node->subalbum['count']) || isset($node->album['count']))) {
      if ($node_type == 'photos') {
        $title = t('Album view');
        $type = 'album';
      }
      else {
        $title = t('Sub-Album view');
        $type = 'sub_album';
      }
      $count = 0;
      if (!empty($node->subalbum['count'])) {
        $count = $node->subalbum['count'];
      }
      elseif (!empty($node->album['count'])) {
        $count = $node->album['count'];
      }
      if ($count <> 0) {
        $node_links['photos_album'] = array(
          'title' => $title,
          'url' => Url::fromUri('base:photos/' . $type . '/' . $node->id()),
          'attributes' => array('title' => t('A total of @count images', array('@count' => $count))),
        );
      }
    }

    $links['photos'] = array(
      '#theme' => 'links__node__photos',
      '#attributes' => array('class' => array('links', 'inline')),
      '#links' => $node_links
    );
  }
}

/**
 * Page and Teaser display settings.
 */
function _photos_node_view($node, $display, $view_mode) {
  $album = '';
  $default_style = 'medium';
  if ($display <> 0) {
    $default_order = \Drupal::config('photos.settings')->get('photos_display_imageorder');
    $order = explode('|', (isset($node->album['imageorder']) ? $node->album['imageorder'] : $default_order));
    $order = _photos_order_value_change($order[0], $order[1]);
    $default_style = \Drupal::config('photos.settings')->get('photos_display_' . $view_mode . '_imagesize') ?: 'thumbnail';
    $style_name = isset($node->album[$view_mode . '_imagesize']) ? $node->album[$view_mode . '_imagesize'] : $default_style;
  }
  switch ($display) {
    case 0:
      // Display none.
    break;
    case 1:
      // Display cover.
      $album = array();
      if (isset($node->album['cover'])) {
        if (isset($node->album['cover']['view'])) {
          $album = $node->album['cover']['view'];
          /*
          $album .= photos_get_info($node->album['cover']['fid'], 0, array(
            'href' => 'photos/album/' . $node->id(),
            'style_name' => $style_name,
            'colorbox' => TRUE,
            'pid' => $node->id()
          ));
          */
        }
        else {
          // URL backwards compatibility -- @todo remove in D8 cleanup.
          $image = new stdClass();
          $variables = array(
            'style_name' => $style_name,
            'uri' => $node->album['cover']['url'],
          );

          // The image.factory service will check if our image is valid.
          $image_info = \Drupal::service('image.factory')->get($node->album['cover']['url']);
          if ($image_info->isValid()) {
            $variables['width'] = $image_info->getWidth();
            $variables['height'] = $image_info->getHeight();
          }
          else {
            $variables['width'] = $variables['height'] = NULL;
          }

          $image_render_array = [
            '#theme' => 'image_style',
            '#uri' => $node->album['cover']['url'],
            '#style_name' => $style_name,
          ];
          $image->view = $image_render_array;
          $image->href = 'photos/album/' . $node->id();
          $image->uri = $node->album['cover']['url'];
          $image->pid = $node->id();
          $image->title = $node->getTitle();

          $image_render_array = array(
            '#theme' => 'photos_image_html',
            '#image' => $image,
            '#style_name' => $style_name,
          );
          $album = $image_render_array;
        }
      }
    break;
    case 2:
      // Display thumbnails.
      $column = (isset($_GET['field'])) ? \Drupal\Component\Utility\Html::escape($_GET['field']) : 0;
      $sort = (isset($_GET['sort'])) ? \Drupal\Component\Utility\Html::escape($_GET['sort']) : 0;
      $view_num = \Drupal::config('photos.settings')->get('photos_display_' . $view_mode . '_viewnum') ?: 10;
      $limit = isset($node->album[$view_mode . '_viewnum']) ? $node->album[$view_mode . '_viewnum'] : $view_num;

      $term = _photos_order_value($column, $sort, $limit, $order);
      $query = db_select('file_managed', 'f');
      $query->join('photos_image', 'p', 'p.fid = f.fid');
      $query->join('users', 'u', 'u.uid = f.uid');
      $query->fields('f', array('uri', 'filemime', 'created', 'filename', 'filesize'))
        ->fields('p')
        ->fields('u', array('uid', 'name'));
      $query->condition('p.pid', $node->id());
      $query->orderBy($term['order']['column'], $term['order']['sort']);
      $query->range(0, $term['limit']);
      $result = $query->execute();

      $i = 0;
      // Necessary when upgrading from D6 to D7.
      $image_styles = image_style_options(FALSE);
      if (!isset($image_styles[$style_name])) {
        $style_name = \Drupal::config('photos.settings')->get('photos_display_teaser_imagesize');
      }
      $album = array();
      // Thumbnails.
      // @todo create render array for multiple thumbnails.
      foreach ($result as $data) {
        $album[] = photos_get_info(0, $data, array(
          'href' => 'photos/image/' . $data->fid,
          'style_name' => $style_name,
          'colorbox' => TRUE,
          'pid' => $node->id()
        ));
        ++$i;
      }
      // More link.
      if ($i >= $limit)
        $more_link = array(
          '#type' => 'more_link',
          '#url' => Url::fromUri('base:photos/album/' . $node->id()),
          '#title' => t('Album view')
        );
        $album .= drupal_render($more_link);
    break;
  }
  return $album;
}


/**
 * Implements hook_node_validate().
 */
function photos_node_validate(NodeInterface $node, $form, \Drupal\Core\Form\FormStateInterface &$form_state) {
  if ($node->getType() == 'photos') {
    // @todo check album limits for creating new albums.
    // $t = photos_user_count();
    // (isset($t['rest']) && arg(2) <> 'edit') ? $form_state->setErrorByName('title', t('You cannot create more albums.')) : NULL;
  }
}


/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function photos_node_insert(NodeInterface $node) {
  if ($node->getType() == 'photos') {
    $node_album = serialize($node->album);
    db_insert('photos_album')
      ->fields(array(
        'pid' => $node->id(),
        'data' => $node_album,
        'fid' => 0,
        'count' => 0
      ))
      ->execute();
    photos_set_count('user_album', $node->getOwnerId());
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function photos_node_update(NodeInterface $node) {
  if ($node->getType() == 'photos') {
    db_update('photos_album')
      ->fields(array(
        'data' => serialize($node->album)
      ))
      ->condition('pid', $node->id())
      ->execute();
    photos_set_count('user_album', $node->getOwnerId());
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function photos_node_delete(NodeInterface $node) {
  if ($node->getType() == 'photos') {
    if ($node->album['count'] || !\Drupal::config('photos.settings')->get('photos_user_count_cron')) {
      $result = db_query('SELECT f.fid, f.uri FROM {file_managed} f INNER JOIN {photos_image} p ON f.fid = p.fid WHERE p.pid = :nid',
        array(':nid' => $node->id()));

      foreach ($result as $file) {
        $msg[] = photos_file_del($file->fid, $file->uri);
      }
      if (isset($msg[0])) {
        photos_set_count('user_image', $node->getOwnerId());
        $image_count = count($msg);
        $message = \Drupal::translation()->formatPlural($image_count, '1 image deleted.', '@count images deleted.');
        drupal_set_message($message);
      }
    }
    // Cleanup photos_album table.
    db_query("DELETE FROM {photos_album} WHERE pid = :nid", array(':nid' => $node->id()));
    photos_set_count('user_album', $node->getOwnerId());
  }

  // Check for sub-albums.
  if (\Drupal::config('photos.settings')->get('photos_node_' . $node->getType())) {
    db_query("DELETE FROM {photos_node} WHERE nid = :nid", array(':nid' => $node->id()));
    db_query("DELETE FROM {photos_count} WHERE cid = :nid AND type = :type", array(':nid' => $node->id(), ':type' => 'node_node'));
  }
}

/**
 * Implements hook_user_insert().
 */
function photos_user_insert(\Drupal\user\UserInterface $account) {
  db_query("INSERT INTO {photos_count} (cid, changed, type, value) VALUES (:uid, 0, 'user_album', 0), (:uid, 0, 'user_image', 0)",
    array(':uid' => $account->id()));
}

/**
 * Implements hook_ENTITY_TYPE_load().
 */
function photos_user_load($users) {
  foreach ($users as $account) {
    // @todo rename album to photos?
    $account->album['album']['count'] = photos_get_count('user_album', $account->id());
    $account->album['image']['count'] = photos_get_count('user_image', $account->id());
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function photos_entity_extra_field_info() {
  // User albums.
  $fields['user']['user']['display']['photos_album_count'] = array(
    'label' => t('User albums'),
    'description' => t('User album count view element.'),
    'weight' => 10,
  );
  // User images.
  $fields['user']['user']['display']['photos_image_count'] = array(
    'label' => t('User images'),
    'description' => t('User image count view element.'),
    'weight' => 15,
  );
  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_view() for user entities.
 */
function photos_user_view(array &$build, EntityInterface $account, EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode == 'full') {
    if (\Drupal::currentUser()->hasPermission('view photo') || $account->hasPermission('create photo')) {
      $user = \Drupal::currentUser();
      if ($display->getComponent('photos_album_count')) {
        $description = '';
        if ($account->album['album']['count']) {
          $url = Url::fromUri('base:photos/user/' . $account->id() . '/album');
          $description = \Drupal::l(t('@a albums', array('@a' => $account->album['album']['count'])), $url);
          if ($account->id() == $user->id()) {
            $description .= \Drupal::l(t('Create new album'), Url::fromUri('base:node/add/photos'));
          }
        }
        elseif ($account->id() == $user->id()) {
          $description = t('No albums yet') . ', ' . \Drupal::l(t('Create album'), Url::fromRoute('node.add', array('node_type' => 'photos')));
        }
        $build['photos_album_count'] = array(
          '#type' => 'item',
          '#markup' => '<h4 class="label">' . t('User albums') . '</h4> ' . $description,
        );
      }

      if ($display->getComponent('photos_image_count')) {
        $description = '';
        if ($account->album['image']['count']) {
          $url = Url::fromUri('base:photos/user/' . $account->id() . '/image');
          $description = \Drupal::l(t('@a images', array('@a' => $account->album['image']['count'])), $url);
        }
        elseif ($account->id() == $user->id()) {
          // @todo finish photos/upload page.
          // $description = t('No images yet') . ', ' . \Drupal::l(t('Upload images'), Url::fromRoute('photos.upload'));
        }
        $build['photos_image_count'] = array(
          '#type' => 'item',
          '#markup' => '<h4 class="label">' . t('User images') . '</h4> ' . $description,
        );
      }
    }
  }
}

/**
 * Implements hook_comment_links_alter().
 */
function photos_comment_links_alter(array &$links, \Drupal\comment\CommentInterface $entity, array &$context) {
  $current_path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $current_path);
  if ($entity->getCommentedEntityTypeId() == 'node' && $context['commented_entity']->getType() == 'photos' && $path_args[1] <> 'photos') {
    $fid = db_select('photos_comment', 'v')
      ->fields('v', array('fid'))
      ->condition('v.cid', $entity->id())
      ->execute()->fetchField();
    if (!empty($fid)) {
      $links['photos'] = array(
        '#theme' => 'links__comment__photos',
        '#attributes' => array('class' => array('links', 'inline')),
        '#links' => array(
          'comment-report' => array(
            'title' => t('View image'),
            'url' => Url::fromRoute('photos.image', ['file' => $fid]),
          ),
        ),
      );
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function photos_comment_delete(\Drupal\comment\CommentInterface $comment) {
  // Get fid.
  $fid = db_select('photos_comment', 'v')
    ->fields('v', array('fid'))
    ->condition('v.cid', $comment->id())
    ->execute()->fetchField();
  // Delete comment from {photos_comment}.
  db_delete('photos_comment')
    ->condition('cid', $comment->id())
    ->execute();
  // Update image comment count.
  db_query("UPDATE {photos_image} SET comcount = (SELECT COUNT(fid) FROM {photos_comment} WHERE fid = :fid) WHERE fid = :fid",
      array(':fid' => $fid));
}

/**
 * Implements hook_form_alter().
 */
function photos_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Node type form.
  // @todo update or remove sub-album and share functionality.
  if ($form_id == 'node_type_edit_form' || $form_id == 'node_type_add_form') {
    $node_type = $form_state->getFormObject()->getEntity();
    if ($node_type->id() <> 'photos') {
      $form['photos'] = array(
        '#type' => 'details',
        '#title' => t('Sub-Album settings'),
        '#group' => 'additional_settings'
      );
      $form['photos']['photos_node'] = array(
        '#type' => 'radios',
        '#title' => t('Sub-Album'),
        '#default_value' => \Drupal::config('photos.settings')->get('photos_node_' . $form['type']['#default_value']),
        '#options' => array(t('Disabled'), t('Enabled')),
        '#description' => t('Node will become a sub-album, you can add images from other albums to this node.'),
        '#group' => 'photos',
        '#weight' => 5
      );
      $form['photos']['photos_share'] = array(
        '#type' => 'radios',
        '#title' => t('Reference'),
        '#default_value' => \Drupal::config('photos.settings')->get('photos_share_' . $form['type']['#default_value']),
        '#options' => array(t('Disabled'), t('Enabled')),
        '#description' => t('Displays a shortcut to the image share code that can be copied and pasted.'),
        '#group' => 'photos',
        '#weight' => 10
      );
    }
  }

  // Comment form(s).
  // @todo dynamic comment form id?
  if ($form_id == 'comment_node_photos_form' && \Drupal::config('photos.settings')->get('photos_comment')
    || $form_id == 'comment_comment_form' && \Drupal::config('photos.settings')->get('photos_comment')) {

    // Get path args.
    $current_path = \Drupal::service('path.current')->getPath();
    $arg = explode('/', $current_path);

    // Get fid.
    $fid = FALSE;
    if ($form_state->getValue('photos_fid')) {
      $fid = $form_state->getValue('photos_fid');
    }
    elseif ($form_state->getValue('fid')) {
      $fid = $form_state->getValue('fid');
    }
    elseif (isset($arg[3]) && $arg[1] == 'photos' && is_numeric($arg[3])) {
      $fid = $arg[3];
    }
    elseif (isset($arg[6]) && $arg[2] == 'reply' && is_numeric($arg[6])) {
      $fid = db_query('SELECT fid FROM {photos_comment} WHERE cid = :cid',
        array(':cid' => $arg[6]))->fetchField();
    }
    if ($fid) {
      // Form action.
      $action_url = Url::fromUri('base:photos/image/' . $fid)->toString();
      $form['#action'] = $action_url;
      // Hidden fid fields.
      $form['fid'] = array(
        '#type' => 'hidden',
        '#value' => $fid,
      );
      $form['comment']['photos_fid'] = array(
        '#type' => 'hidden',
        '#value' => $fid,
      );
      // Custom submit handler.
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'photos_comment_form_submit';
        }
      }
    }
  }

  // @todo update or remove share functionality.
  if (isset($form['type']) && isset($form['#node']) && \Drupal::currentUser()->hasPermission('view photo')) {
    $node = $form['#node'];
    if (variable_get('photos_share_' . $node->getType(), 0)) {
      $form['photos_share'] = array(
        '#title' => t('Insert image'),
        '#weight' => 0,
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
      );
      $form['photos_share']['share']['#markup'] = '<div id="potos-colorbox">' .
        \Drupal::l(t('Insert an existing image'), 'photos/share', array(
          'query' => array(
            'iframe' => 'true',
            'height' => 650,
            'width' => 850
          ),
          'attributes' => array(
            'title' => t('Choose an image from my albums to insert into the node'),
            'class' => array('colorbox-load')
          )
        )) . ' (' .
        \Drupal::l(t('Open a new window'), 'photos/share', array(
          'attributes' => array(
            'title' => t('Choose an image from my albums to insert into the node'),
            'target' => '_blank'
          )
        )) . ')</div>';
    }
  }

  // Photos node form.
  if ($form_id == 'node_photos_form') {
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'photos_form_redirect';
      }
    }
  }

}

/**
 * Redirect photos form to image management page.
 */
function photos_form_redirect($form, FormStateInterface &$form_state) {
  $nid = $form_state->getValue('nid');
  $url = Url::fromUri('base:node/' . $nid . '/photos');
  $form_state->setRedirectUrl($url);
}

/**
 * Submit handler for image comments.
 */
function photos_comment_form_submit($form, FormStateInterface &$form_state) {
  if ($fid = $form_state->getValue('photos_fid')) {
    $comment = $form_state->getFormObject()->getEntity();
    // Record comment in photos_comment.
    db_insert('photos_comment')
      ->fields(array(
        'fid' => $fid,
        'cid' => $comment->id()
      ))
      ->execute();
    // Update image comment count.
    db_query("UPDATE {photos_image} SET comcount = (SELECT COUNT(fid) FROM {photos_comment} WHERE fid = :fid) WHERE fid = :fid",
      array(':fid' => $fid));

    // Redirect back to image page.
    $url = Url::fromUri('base:photos/image/' . $fid);
    $form_state->setRedirectUrl($url);
  }
}

/**
 * Comments on single picture.
 */
function _photos_comment($fid, $com_count, $node) {
  $user = \Drupal::currentUser();
  $output = array();
  if (\Drupal::moduleHandler()->moduleExists('comment') && \Drupal::currentUser()->hasPermission('access comments')) {
    // @todo get other comment form if needed?
    if ($com_count && ($node->comment && $node->comment->status <> 0 || $node->comment_photos && $node->comment_photos->status <> 0)
      || \Drupal::currentUser()->hasPermission('administer comments')) {

      // @todo look up setting for photos comment field.
      $mode = \Drupal\comment\CommentManagerInterface::COMMENT_MODE_THREADED;
      // $mode = variable_get('comment_default_mode_' . $node->type, COMMENT_MODE_THREADED);

      // @todo look up setting for photos comment field.
      $comments_per_page = 50;
      // $comments_per_page = variable_get('comment_default_per_page_' . $node->type, 50);

      $query = db_select('photos_comment', 'v')->extend('Drupal\Core\Database\Query\PagerSelectExtender');
      $query->join('comment_field_data', 'c', 'c.cid = v.cid');
      $query->addField('v', 'cid');
      $query->condition('v.fid', $fid)
        ->addTag('node_access')
        ->addTag('comment_filter')
        ->addMetaData('node', $node)
        ->limit($comments_per_page);

      $count_query = db_select('photos_comment', 'v');
      $count_query->join('comment', 'c', 'c.cid = v.cid');
      $count_query->addExpression('COUNT(*)');
      $count_query
        ->condition('v.fid', $fid)
        ->addTag('node_access')
        ->addTag('comment_filter')
        ->addMetaData('node', $node);

      if (!\Drupal::currentUser()->hasPermission('administer comments')) {
        $query->condition('c.status', COMMENT_PUBLISHED);
        $count_query->condition('c.status', COMMENT_PUBLISHED);
      }

      if ($mode === \Drupal\comment\CommentManagerInterface::COMMENT_MODE_FLAT) {
        $query->orderBy('c.cid', 'ASC');
      }
      else {
        $query->addExpression('SUBSTRING(c.thread, 1, (LENGTH(c.thread) - 1))', 'torder');
        $query->orderBy('torder', 'ASC');
      }
      $query->setCountQuery($count_query);
      $cids = $query->execute()->fetchCol();

      if (!empty($cids)) {
        $comments = \Drupal::entityManager()->getStorage('comment')->loadMultiple($cids);
        // comment_prepare_thread($comments);
        $build = \Drupal::entityManager()->getViewBuilder('comment')->viewMultiple($comments);
        $build['pager']['#type'] = 'pager';
        $output['comments'] = $build;
      }
    }

    if ($node->comment && $node->comment->status == 2 || $node->comment_photos && $node->comment_photos->status == 2) {
      $field_name = 'comment';
      // @todo get other comment form if needed?
      if ($node->comment_photos) {
        $field_name = 'comment_photos';
      }
      if (\Drupal::currentUser()->hasPermission('post comments') && \Drupal::config('photos.settings')->get('photos_comment')
        || \Drupal::currentUser()->hasPermission('administer comments') && \Drupal::config('photos.settings')->get('photos_comment')) {

        // Prep comment form.
        $definition = \Drupal::entityTypeManager()->getDefinition('comment');
        $bundle_key = $definition->get('entity_keys')['bundle'];
        $values = array(
          'entity_type' => 'node',
          'field_name' => $field_name,
          $bundle_key => 'comment',
          'entity_id' => array(
            'target_id' => $node->id(),
          )
        );
        // Build comment entity for form.
        $entity = \Drupal::entityTypeManager()->getStorage($definition->get('id'))
          ->create($values);

        // Get entity form.
        $build = \Drupal::service('entity.form_builder')->getForm($entity);
        $output['comment_form'] = $build;
      }
    }
  }

  if ($output) {
    if (\Drupal::moduleHandler()->moduleExists('ajax_comments')) {
      // Add support for ajax comments on image page.
      $output['comments']['#prefix'] = '<div id="comment-wrapper-nid-' . $node->id() . '">';
      $output['comments']['#prefix'] .= '<div class="ajax-comment-wrapper"></div>';
      $output['comments']['#suffix'] = '</div>';
    }
  }

  return $output;
}

/**
 * Photos - extends block view(s).
 */
function _photos_block_image($type, $limit, $url = 'photos/image', $uid = 0, $sort = array('column' => 'f.fid', 'order' => 'DESC')) {
  $query = db_select('file_managed', 'f');
  $query->join('photos_image', 'p', 'p.fid = f.fid');
  $query->join('node_field_data', 'n', 'n.nid = p.pid');
  $query->join('users_field_data', 'u', 'u.uid = f.uid');
  $query->fields('f', array('uri', 'filemime', 'created', 'filename'))
    ->fields('u', array('uid', 'name'))
    ->fields('n', array('nid'))
    ->fields('p');
  $query->condition('n.status', 1);

  if ($type == 'user') {
    $query->condition('f.uid', $uid);
  }

  if ($type == 'rand') {
    $query->orderRandom();
  }
  else {
    $query->orderBy($sort['column'], $sort['order']);
  }
  $query->range(0, $limit);
  $query->addTag('node_access');
  $result = $query->execute();

  $view = array();
  $images = array();
  foreach ($result as $image) {
    $image = photos_get_info(0, $image);
    $image->href = Url::fromUri('base:' . $url . '/' . $image->fid);
    $images[] = $image;
  }
  if (isset($images[0]->fid)) {
    $render_array = array(
      '#theme' => 'photos_block',
      '#images' => $images,
      '#block_type' => 'image'
    );
    $content = drupal_render($render_array);

    if ($url && count($images) >= $limit) {
      $more_link = array(
        '#type' => 'more_link',
        '#url' => Url::fromUri('base:' . $url),
        '#title' => t('View more')
      );
      $content .= drupal_render($more_link);
    }
    if ($type == 'user') {
      return array(
        'content' => $content,
        'title' => $images[0]->name . "'s Images"
      );
    }
    else {
      return $content;
    }
  }
  return FALSE;
}

/**
 * Theme photos block.
 */
function photos_theme_photos_block($variables) {
  $type = $variables['block_type'];
  $images = $variables['images'];
  $items = array();
  // Get thumbnail size image style.
  $image_sizes = \Drupal::config('photos.settings')->get('photos_size');
  $style_name = key($image_sizes);
  switch ($type) {
    case 'image':
      foreach ($images as $image) {
        $render_array = array(
          '#theme' => 'photos_image_html',
          '#image' => $image,
          '#style_name' => $style_name
        );
        $items[] = $render_array;
      }
    break;
    case 'album':
      foreach ($images as $album) {
        $op['attributes']['title'] = $album['node']->count ? t('A total of @title images', array('@title' => $album['node']->count)) : t('Album is empty');
        $url = Url::fromUri('base:node/' . $album['node']->nid);
        $render_array = array(
          '#markup' => $album['view'] . '<div class="photos_block_album_title">' . \Drupal::l($album['node']->title, $url, $op) . '</div>'
        );
        $items[] = $render_array;
      }
    break;
  }
  $render_array = array(
    '#theme' => 'item_list',
    '#items' => $items
  );
  $content = drupal_render($render_array);

  return $content;
}

/**
 * Photos - image removal.
 */
function photos_file_del($fid, $filepath = 0, $count = 0) {
  if (!$filepath) {
    if ($count) {
      $file = File::load($fid);
      $file->pid = db_select('photos_image', 'p')
        ->fields('p', array('pid'))
        ->condition('fid', $fid)
        ->execute()->fetchField();
      $filepath = $file->getFileUri();
    }
    else {
      $filepath = db_query('SELECT uri FROM {file_managed} WHERE fid = :fid', array(':fid' => $fid))->fetchField();
    }
  }
  if ($filepath) {
    if (\Drupal::config('photos.settings')->get('photos_comment')) {
      $result = db_select('photos_comment', 'v')
        ->fields('v', array('cid'))
        ->condition('v.fid', $fid)
        ->execute();
      foreach ($result as $cids) {
        // Delete comment.
        $cids->cid->delete();
      }
    }
    db_delete('photos_image')
      ->condition('fid', $fid)
      ->execute();
    db_delete('photos_node')
      ->condition('fid', $fid)
      ->execute();
    db_delete('photos_comment')
      ->condition('fid', $fid)
      ->execute();
    if ($count) {
      photos_set_count('node_node', $file->pid);
      photos_set_count('node_album', $file->pid);
      photos_set_count('user_image', $file->getOwnerId());
      // Update comment statistics for album node.
      // @todo Argument 1 passed to Drupal\comment\CommentStatistics::update() must be an instance of Drupal\comment\CommentInterface.
      // _comment_update_node_statistics($file->pid);
      // $node = \Drupal\node\Entity\Node::load($file->pid);
      // \Drupal::service('comment.statistics')->update($node);
      // @todo delete comments.
    }

    if (empty($file)) {
      $file = File::load($fid);
    }
    if (empty($file->pid)) {
      $file->pid = db_select('photos_image', 'p')
        ->fields('p', array('pid'))
        ->condition('fid', $file->id())
        ->execute()->fetchField();
    }
    // Delete file usage and delete files.
    $file_usage = \Drupal::service('file.usage');
    $file_usage->delete($file, 'photos', 'node', $file->pid);
    file_delete($file->id());
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Prepare photos custom directory structure.
 */
function photos_check_path($type = 'default', $file = FALSE, $account = FALSE) {
  if (!$account) {
    $user = \Drupal::currentUser();
    $account = $user;
  }
  $path = array();
  if (\Drupal::config('photos.settings')->get('photos_path')) {
    $mm = \Drupal::service('date.formatter')->format(REQUEST_TIME, 'custom', "Y|m|d");
    $m = explode('|', $mm);
    $a = array('%uid' => $account->id(), '%username' => $account->getUsername(), '%Y' => $m[0], '%m' => $m[1], '%d' => $m[2]);
    $b = strtr(\Drupal::config('photos.settings')->get('photos_path'), $a);
    $path = explode('/', $b);
  }
  else {
    $path[] = 'photos';
  }
  switch ($type) {
    case 'default':
      $scheme = file_default_scheme();
    break;
    case 'private':
      $scheme = 'private';
    break;
    case 'public':
      $scheme = 'public';
    break;
  }
  $dirs = array();
  foreach ($path as $folder) {
    $dirs[] = $folder;
    $t = $scheme . '://' . implode('/', $dirs);
    if (!file_prepare_directory($t, FILE_CREATE_DIRECTORY)) {
      return FALSE;
    }
  }

  return $t;
}

/**
 * Storage process information.
 */
function photos_upload_info($t = 'd') {
  $info = \Drupal::config('photos.settings')->get('photos_size');
  if (is_array($info)) {
    $v['count'] = count($info);
    $v['size'] = $info;
    return $v;
  }

  return FALSE;
}

/**
 * User albums.
 */
function _photos_useralbum_option($uid = 0, $current = 0) {
  if (!$uid) $uid = \Drupal::currentUser()->id();
  $output = array();

  // @todo cleanup and test.
  $result = db_query('SELECT n.nid, n.title FROM {node_field_data} n
    INNER JOIN {photos_album} a
    ON a.pid = n.nid
    WHERE n.uid = :uid
    ORDER BY n.nid DESC', array(':uid' => $uid));
  $query = db_select('node_field_data', 'n');
  $query->join('photos_album', 'a', 'a.pid = n.nid');
  $query->fields('n', array('nid', 'title'));
  $query->condition('n.uid', $uid);
  $query->orderBy('n.nid', 'DESC');
  $result = $query->execute();

  $true = FALSE;
  foreach ($result as $a) {
    $choice = new stdClass();
    $choice->option = array($a->nid => $a->title);
    $output[] = $choice;
    $true = TRUE;
  }
  if ($current) {
    $choice = new stdClass();
    $choice->option = array($current[0] => $current[1]);
    $output[] = $choice;
  }
  if (!$true) {
    $output = array(t('You do not have an album yet.'));
  }

  return $output;
}

/**
 * Image written to database.
 */
function photos_image_date($file) {
  // @todo re-write.
  // @todo check title, description, weight.
  //  - maybe pass file object and array of other vars.
  $exif = ($file->getMimeType() == 'image/jpeg') ? 1 : 0;
  if ($file->id() && isset($file->pid)) {
    $fid = $file->id();
    $pid = $file->pid;
    db_merge('photos_image')
      ->key(array(
        'fid' => $file->id()
      ))
      ->fields(array(
        'pid' => $file->pid,
        'title' => isset($file->title) ? $file->title : $file->getFilename(),
        'des' => isset($file->des) ? $file->des : '',
        'wid' => isset($file->wid) ? $file->wid : 0,
        'comcount' => 0,
        'count' => 0,
        'exif' => $exif
      ))
      ->execute();
    if (isset($fid) && !empty($fid)) {
      if (isset($file->nid)) {
        db_insert('photos_node')
          ->fields(array(
            'nid' => $file->nid,
            'fid' => $file->id()
          ))
          ->execute();
      }
      if (\Drupal::config('photos.settings')->get('photos_user_count_cron')) {
        $user = \Drupal::currentUser();
        photos_set_count('user_image', ($file->getOwnerId ? $file->getOwnerId : $user->id()));
        photos_set_count('node_album', $file->pid);
        isset($file->nid) ? photos_set_count('node_node', $file->nid) : NULL;
      }
      // Save file and add file usage.
      $file_usage = \Drupal::service('file.usage');
      $file_usage->add($file, 'photos', 'node', $pid);
      // Check admin setting for maximum image resolution.
      if ($photos_size_max = \Drupal::config('photos.settings')->get('photos_size_max')) {
        // Will scale image if needed.
        file_validate_image_resolution($file, $photos_size_max);
      }
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Get thumbnail information by name.
 */
function _photos_get_thumbname($name) {
  // @todo deprecated, use image styles.
  $t = photos_upload_info(0);
  foreach ($t['size'] as $c) {
    if ($c['name'] == $name) {
      return $c;
    }
  }
}

/**
 * Get photo information.
 */
function photos_get_info($fid, $image = FALSE, $view = FALSE, $all = FALSE) {
  if ($fid) {
    if (!$all) {
      $image = db_select('file_managed')
        ->fields('file_managed', array('fid', 'uri', 'filename'))
        ->condition('fid', $fid)
        ->execute()->fetchObject();
    }
    else {
      $image = db_query('SELECT f.uri, f.filemime, f.created, f.filename, u.uid, u.name, p.*
        FROM {file_managed} f
        INNER JOIN {photos_image} p ON f.fid = p.fid
        INNER JOIN {node_field_data} n ON p.pid = n.nid
        INNER JOIN {users_field_data} u ON f.uid = u.uid
        WHERE p.fid = :fid', array(':fid' => $fid))->fetchObject();
    }
  }

  // Set image height and width if needed.
  if (!isset($image->height) && isset($image->uri)) {
    // The image.factory service will check if our image is valid.
    $image_info = \Drupal::service('image.factory')->get($image->uri);
    if ($image_info->isValid()) {
      $image->width = $image_info->getWidth();
      $image->height = $image_info->getHeight();
    }
    else {
      $image->width = $image->height = NULL;
    }
  }

  if ($image && isset($image->fid)) {
    $sizes = photos_upload_info(0);
    if (\Drupal::config('photos.settings')->get('photos_access_photos')) {
      $image->original = 'photos/get/' . $image->fid . '/original/' . $image->uri;
      foreach ($sizes['size'] as $style => $label) {
        $image->thumb[$style] = $label;
      }
    }
    else {
      $image->original = $image->uri;
      foreach ($sizes['size'] as $style => $label) {
        $image->thumb[$style] = $label;
      }
    }
    if ($view) {
      if (!isset($view['title']) && isset($image->title)) $view['title'] = $image->title;
      if (isset($view['style_name']) && !empty($view['style_name'])) {
        $style_name = $view['style_name'];
      }
      else {
        $image_sizes = \Drupal::config('photos.settings')->get('photos_size');
        $style_name = key($image_sizes);
      }
      if (!$style_name) {
        $style_name = 'thumbnail';
      }
      if (isset($view['href'])) {
        $image->href = $view['href'];
      }
      if (isset($view['colorbox'])) {
        $view['colorbox'] = $image->thumb[\Drupal::config('photos.settings')->get('photos_display_view_imagesize')];
      }
      // Check scheme and prep image.
      $scheme =  file_uri_scheme($image->uri);
      $uri = $image->uri;
      // If private create temporary derivative.
      if ($scheme == 'private') {
        $url = photos_derivative($uri, $style_name, $image->fid, $scheme);
      }
      else {
        // Public and all other images.
        $style = \Drupal\image\Entity\ImageStyle::load($style_name);
        $url = $style->buildUrl($uri);
      }
      // Build image render array.
      // @todo alt?
      $thumb_render_array = array(
        '#theme' => 'image',
        '#uri' => $url,
      );

      return $thumb_render_array;
    }
  }

  return $image;
}

/**
 * Generate image style derivatives.
 * Originally added to create private image style derivatives.
 */
function photos_derivative($uri, $style_name, $fid, $scheme = 'private') {
  // Load the image style configuration entity.
  $style = \Drupal\image\Entity\ImageStyle::load($style_name);

  // Create URI with fid_{fid}
  $pathinfo = pathinfo($uri);
  $ext = $pathinfo['extension'];
  // Set temporary file destination.
  $destination = $scheme . '://photos/tmp_images/' . $style_name . '/image_' . $fid . '.jpg';
  // Create image file.
  $style->createDerivative($uri, $destination);

  // Return URL.
  $url = file_create_url($destination);
  return $url;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function photos_preprocess_photos_album_view(&$variables, $hook) {
  // Set additional variables.
  if ($variables['node']) {
    $variables['node_type'] = $variables['node']->getType();
    $variables['node_title'] = $variables['node']->getTitle();
    $account = $variables['node']->getOwner();
    $account_link = array(
      '#theme' => 'username',
      '#account' => $account
    );
    $variables['author_name'] = drupal_render($account_link);
    $variables['date'] = \Drupal::service('date.formatter')->format($variables['node']->getCreatedTime());
  }
  $variables['pager'] = $variables['album']['pager'];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function photos_preprocess_photos_image_html(&$variables, $hook) {
  $style_name = $variables['style_name'];
  $image = $variables['image'];
  $style_label = isset($image->thumb[$style_name]) ? $image->thumb[$style_name] : '';
  $filename = isset($image->filename) ? strip_tags($image->filename) : '';
  $title = isset($image->title) ? strip_tags($image->title) : $filename;
  $alt = isset($image->alt) ? strip_tags($image->alt) : $title;
  $image->alt = $alt;
  if ($style_name == 'original') {
    $image_styles = image_style_options(FALSE);
    if (isset($image_styles['original'])) {
      // Original image style override.
      // Render image view.
      // @todo redundant code.
      $image_view_array = array(
        '#theme' => 'image_style',
        '#style_name' => $style_name,
        '#uri' => $image->uri,
        '#width' => $image->width,
        '#height' => $image->height,
        '#title' => $alt,
        '#alt' => $alt
      );
    }
    else {
      // Original image.
      $image_view_array = array(
        '#theme' => 'image',
        '#uri' => $image->uri,
        '#width' => $image->width,
        '#height' => $image->height,
        '#title' => $alt,
        '#alt' => $alt
      );
    }
  }
  else {
    // Check scheme and prep image.
    $scheme =  file_uri_scheme($image->uri);
    $uri = $image->uri;
    // If private create temporary derivative.
    if ($scheme == 'private') {
      $url = photos_derivative($uri, $style_name, $image->fid, $scheme);
      // Do not use filename as alt or title with private files.
      if ($alt == $filename) {
        $alt = '';
      }
      if ($title == $filename) {
        $title = '';
      }
    }
    else {
      // Public and all other images.
      $style = \Drupal\image\Entity\ImageStyle::load($style_name);
      $url = $style->buildUrl($uri);
    }

    // Render image view.
    $image_view_array = array(
      '#theme' => 'image',
      '#uri' => $url,
      '#title' => $alt,
      '#alt' => $alt
    );
  }
  $image->view = $image_view_array;
}

/**
 * Return number of albums or photos.
 */
function photos_get_count($type, $id = 0) {
  switch ($type) {
    case 'user_album':
    case 'user_image':
    case 'site_album':
    case 'site_image':
    case 'node_node':
      return db_query("SELECT value FROM {photos_count} WHERE cid = :cid AND type = :type", array(':cid' => $id, ':type' => $type))->fetchField();
    case 'node_album':
      return db_query("SELECT count FROM {photos_album} WHERE pid = :pid", array(':pid' => $id))->fetchField();
  }
}

/**
 * Calculate number of $type.
 */
function photos_set_count($type, $id = 0) {
  switch ($type) {
    case 'user_image':
      $count = db_query('SELECT count(p.fid) FROM {photos_image} p INNER JOIN {file_managed} f ON p.fid = f.fid WHERE f.uid = :id',
        array(':id' => $id))->fetchField();
      $query = db_update('photos_count');
      $query->fields(array(
        'value' => $count,
        'changed' => REQUEST_TIME
      ));
      $query->condition('cid', $id);
      $query->condition('type', $type);
      $affected_rows = $query->execute();
      if (!$affected_rows) {
        db_insert('photos_count')
          ->fields(array(
            'cid' => $id,
            'changed' => REQUEST_TIME,
            'type' => $type,
            'value' => $count
          ))
          ->execute();
      }
    break;
    case 'user_album':
      $count = db_query('SELECT count(p.pid) FROM {photos_album} p INNER JOIN {node_field_data} n ON p.pid = n.nid WHERE n.uid = :uid',
        array(':uid' => $id))->fetchField();
      $query = db_update('photos_count')
        ->fields(array(
          'value' => $count,
          'changed' => REQUEST_TIME
        ))
        ->condition('cid', $id)
        ->condition('type', $type);
      $affected_rows = $query->execute();
      if (!$affected_rows) {
        db_insert('photos_count')
          ->fields(array(
            'cid' => $id,
            'changed' => REQUEST_TIME,
            'type' => $type,
            'value' => $count
          ))
          ->execute();
      }
    break;
    case 'site_album':
      $count = db_query('SELECT COUNT(pid) FROM {photos_album}')->fetchField();
      $query = db_update('photos_count')
        ->fields(array(
          'value' => $count,
          'changed' => REQUEST_TIME
        ))
        ->condition('cid', 0)
        ->condition('type', $type);
      $affected_rows = $query->execute();
      if (!$affected_rows) {
        db_insert('photos_count')
          ->fields(array(
            'cid' => 0,
            'changed' => REQUEST_TIME,
            'type' => $type,
            'value' => $count
          ))
          ->execute();
      }
    break;
    case 'site_image':
      $count = db_query('SELECT COUNT(fid) FROM {photos_image}')->fetchField();
      $query = db_update('photos_count')
        ->fields(array(
          'value' => $count,
          'changed' => REQUEST_TIME
        ))
        ->condition('cid', 0)
        ->condition('type', $type);
      $affected_rows = $query->execute();
      if (!$affected_rows) {
        db_insert('photos_count')
          ->fields(array(
            'cid' => 0,
            'changed' => REQUEST_TIME,
            'type' => $type,
            'value' => $count
          ))
          ->execute();
      }
    break;
    case 'node_node':
      $count = db_query('SELECT COUNT(nid) FROM {photos_node} WHERE nid = :nid', array(':nid' => $id))->fetchField();
      $query = db_update('photos_count')
        ->fields(array(
          'value' => $count,
          'changed' => REQUEST_TIME
        ))
        ->condition('cid', $id)
        ->condition('type', $type);
      $affected_rows = $query->execute();
      if (!$affected_rows) {
        db_insert('photos_count')
          ->fields(array(
            'cid' => $id,
            'changed' => REQUEST_TIME,
            'type' => $type,
            'value' => $count
          ))
          ->execute();
      }
    break;
    case 'node_album':
      db_query("UPDATE {photos_album} SET count = (SELECT COUNT(fid) FROM {photos_image} WHERE pid = :pid) WHERE pid = :pid", array(':pid' => $id));
    break;
  }
}

/**
 * Implements hook_cron().
 */
function photos_cron() {
  _photos_res_count(1);
  $cron_last = \Drupal::state()->get('system.cron_last', 0);
  // @todo delete temporary private image styles:
  // file_unmanaged_delete_recursive('private://photos/tmp_images');
}

/**
 * Update count.
 */
function _photos_res_count($cron = 0) {
  photos_set_count('site_album');
  photos_set_count('site_image');
  $time = $cron ? 7200 : 0;
  // @FIXME
// // @FIXME
// // This looks like another module's variable. You'll need to rewrite this call
// // to ensure that it uses the correct configuration object.
// if ((REQUEST_TIME - variable_get('cron_last', 0)) > $time) {
//     $result = db_query('SELECT uid FROM {users} WHERE uid <> 0');
//     foreach ($result as $t) {
//       photos_set_count('user_image', $t->uid);
//       photos_set_count('user_album', $t->uid);
//     }
//     $result = db_query('SELECT pid FROM {photos_album}');
//     foreach ($result as $t) {
//       photos_set_count('node_album', $t->pid);
//     }
//     $result = db_query('SELECT DISTINCT(nid) FROM {photos_node}');
//     foreach ($result as $t) {
//       photos_set_count('node_node', $t->nid);
//     }
//   }

}

/**
 * Implements hook_libraries_info().
 */
function photos_libraries_info() {
  $libraries['jeditable'] = array(
    'name' => 'Jeditable',
    'vendor url' => 'http://www.appelsiini.net/projects/jeditable',
    'version arguments' => array(
      'file' => 'jquery.jeditable.js',
      'pattern' => '@Version\s+([0-9a-zA-Z\.-]+)@',
      'lines' => 20,
    ),
    'files' => array(
      'js' => array(
        'jquery.jeditable.mini.js',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'jquery.jeditable.mini.js',
          ),
        ),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'jquery.jeditable.js',
          ),
        ),
      ),
    ),
  );
  return $libraries;
}

/**
 * Implememtns hook_theme().
 */
function photos_theme($existing, $type, $theme, $path) {
  return array(
    'photos_editlist_form' => array(
        'render element' => 'form',
    ),
    'photos_comment_count' => array(
      'function' => 'photos_theme_photos_comment_count',
      'variables' => array('comcount' => NULL, 'url' => NULL),
    ),
    'photos_default' => array(
      'template' => 'photos_default',
      'variables' => array('content' => NULL),
    ),
    'photos_down' => array(
      'template' => 'photos_down',
      // @todo rename type.
      'variables' => array('content' => NULL, 'type' => NULL),
    ),
    'photos_slide' => array(
      'template' => 'photos_slide',
      'variables' => array('content' => NULL),
    ),
    'photos_image_view' => array(
      'template' => 'photos_image_view',
      'variables' => array('image' => NULL, 'display_type' => 'view'),
    ),
    'photos_image_block' => array(
      'template' => 'photos_image_block',
      'variables' => array('image' => NULL),
    ),
    'photos_block' => array(
      'function' => 'photos_theme_photos_block',
      'variables' => array('images' => NULL, 'block_type' => NULL),
    ),
    'photos_album_view' => array(
      'template' => 'photos_album_view',
      'variables' => array('album' => NULL, 'node' => NULL),
    ),
    'photos_albumlist' => array(
      'template' => 'photos_albumlist',
      'variables' => array('image' => NULL),
    ),
    'photos_album_links' => array(
      'template' => 'photos_album_links',
      'variables' => array('links' => NULL),
    ),
    'photos_image_html' => array(
      'template' => 'photos_image_html',
      'variables' => array('image' => NULL, 'style_name' => NULL),
    ),
    'photos_exif' => array(
      'template' => 'photos_exif',
      // @todo rename type.
      'variables' => array('exif' => NULL, 'type' => NULL),
    ),
    'photos_print' => array(
      'template' => 'photos_print',
      // @todo rename type.
      'variables' => array('content' => NULL, 'type' => NULL),
    ),
    'photos_share' => array(
      'template' => 'photos_share',
      // @todo rename type.
      'variables' => array('images' => NULL, 'type' => NULL),
    ),
    'photos_vote' => array(
      'template' => 'photos_vote',
      'variables' => array('fid' => NULL),
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK().
 */
function photos_preprocess_photos_image_block(&$variables) {
  // Prepare variables for photos_image_block.html.twig.
  $variables['created'] = \Drupal::service('date.formatter')->format($variables['image']->created, 'short');
  $variables['user_url'] = Url::fromUri('base:photos/user/' . $variables['image']->uid . '/image')->toString();
  $variables['album_url'] = Url::fromUri('base:photos/album/' . $variables['image']->nid)->toString();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function photos_preprocess_photos_default(&$variables) {
  // Prepare content.
  $content = $variables['content'];
  if (isset($content['user'])) {
    $user_images = array(
      '#markup' => $content['user']['image']
    );
    $variables['user_images'] = drupal_render($user_images);
    $user_albums = array(
      '#markup' => $content['user']['album']
    );
  }
  $variables['user_albums'] = drupal_render($user_albums);
  $site_images = array(
    '#markup' => $content['site']['image']
  );
  $variables['site_images'] = drupal_render($site_images);
  $site_albums = array(
    '#markup' => $content['site']['album']
  );
  $variables['site_albums'] = drupal_render($site_albums);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function photos_preprocess_photos_album_links(&$variables) {
  // Prepare content.
  $render_array = array(
    '#markup' => $variables['links']['link']
  );
  $variables['links_display'] = drupal_render($render_array);
  $variables['links_sort'] = drupal_render($variables['links']['sort']);
  $render_array = array(
    '#markup' => $variables['links']['limit']
  );
  $variables['links_limit'] = drupal_render($render_array);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function photos_preprocess_photos_vote(&$variables) {
  $user = \Drupal::currentUser();
  if ($variables['fid']) {
    $fid = $variables['fid'];
    $x = votingapi_select_votes(array('uid' => $user->id(), 'entity_type' => 'image', 'entity_id' => $fid));
    if (!\Drupal::currentUser()->hasPermission('allowed to vote')) {
      $variables['vote']['access'] = TRUE;
      $variables['vote']['down']['#href'] = Url::fromRoute('user.login');
      $variables['vote']['down']['#title'] = t('Login to vote');
      $variables['vote']['up']['#href'] = $variables['vote']['down']['#href'];
      $variables['vote']['up']['#title'] = $variables['vote']['down']['#title'];
    }
    else {
      if (isset($x['0']['value']) && $x['0']['value'] == 1) {
        // @FIXME
// url() expects a route name or an external URI.
// $down_href = url('photos/image/' . $fid . '/vote/down', array('query' => drupal_get_destination()));

        $up_href = '';
      }
      elseif (isset($x['0']['value']) && $x['0']['value'] == -1) {
        $down_href = '';
        // @FIXME
// url() expects a route name or an external URI.
// $up_href = url('photos/image/' . $fid . '/vote/up', array('query' => drupal_get_destination()));

      }
      else {
        // @FIXME
// url() expects a route name or an external URI.
// $down_href = url('photos/image/' . $fid . '/vote/down', array('query' => drupal_get_destination()));

        // @FIXME
// url() expects a route name or an external URI.
// $up_href = url('photos/image/' . $fid . '/vote/up', array('query' => drupal_get_destination()));

      }
      $variables['vote']['up'] = array(
        '#title' => t('I like this image'),
        '#href' => $up_href
      );
      $variables['vote']['down'] = array(
        '#title' => t('I do not like this image'),
        '#href' => $down_href
      );
    }
    $sum = votingapi_recalculate_results('image', $fid);
    if (isset($sum['0']['value']) && $sum['0']['value']) {
      $t_sum = $sum['2']['value'];
      $t_average = $sum['1']['value'];
      $t_count = $sum['0']['value'];
    }
    else {
      $t_count = $t_sum = 0;
    }
    $variables['vote']['count'] = array(
      '#count' => $t_count,
      '#sum' => $t_sum,
      '#average' => isset($t_average) ? $t_average : '',
      '#title' => t('View voting users')
    );
    if (\Drupal::currentUser()->hasPermission('view vote list')) {
      // @FIXME
// url() expects a route name or an external URI.
// $variables['vote']['count']['#href'] = url('photos/zoom/' . $fid . '/vote');

    }
  }
}

/**
 * Rename file with random name.
 */
function _photos_rename($name = 0, $ext = 0) {
  // @todo use transliterate? Or add more options.
  if (\Drupal::config('photos.settings')->get('photos_rname')) {
    if ($name) {
      $name_parts = explode('.', $name);
      return round(rand(15770, 967049700)) . REQUEST_TIME . '.' . ($ext ? $ext : end($name_parts));
    }
    if (!empty($_FILES['files'])) {
      foreach ($_FILES['files']['name'] as $field => $filename) {
        $filename_parts = explode('.', $filename);
        $_FILES['files']['name'][$field] = round(rand(15770, 967049700)) . REQUEST_TIME . '.' . ($ext ? $ext : end($filename_parts));
      }
    }
  }
  elseif ($name) {
    return $name;
  }
}

/**
 * Theme photos comment count.
 */
function photos_theme_photos_comment_count($variables) {
  $url = $variables['url'];
  $comcount = $variables['comcount'];
  $comment = '';
  if (\Drupal::moduleHandler()->moduleExists('comment')) {
    // @todo also check if comments are enabled for photos content type.
    if (empty($comcount)) {
      if (!\Drupal::currentUser()->hasPermission('post comments')) {
        $comment = t('<a href="@login">Login</a> to post comments', array('@login' => Url::fromRoute('user.login')->toString()));
      }
      else {
        $comment = '<a href="' . (isset($url) ? $url . '#comment-form' : '#comment-form') . '">' . t('Add new comment') . '</a>';
      }
    }
    else {
      $comment_count = \Drupal::translation()->formatPlural($comcount, '1 comment', '@count comments');
      $comment = '<a href="' . (isset($url) ? $url . '#comments' : '#comments') . '">' . $comment_count . '</a>';
    }
  }
  return $comment;
}

/**
 * Unzip.
 */
function _photos_unzip($source, $value, $scheme = 'default', $account = FALSE) {
  $user = \Drupal::currentUser();
  $file_count = 0;
  if (version_compare(PHP_VERSION, '5') >= 0) {
    if (!is_file($source)) {
      drupal_set_message(t('Compressed file does not exist, please check the path: @src', array('@src' => $source)));
      return 0;
    }
    $type = array('jpg', 'gif', 'png', 'jpeg', 'JPG', 'GIF', 'PNG', 'JPEG');
    $zip = new ZipArchive();
    // Get relative path.
    $relative_path = \Drupal::service('file_system')->realpath(file_default_scheme() . "://") . '/';
    $source = str_replace(file_default_scheme() . '://', $relative_path, $source);
    // Open zip archive.
    if ($zip->open($source) === TRUE) {
      for ($x = 0; $x < $zip->numFiles; ++$x) {
        $image = $zip->statIndex($x);
        $filename_parts = explode('.', $image['name']);
        $ext = end($filename_parts);
        if (in_array($ext, $type)) {
          $path = file_create_filename(_photos_rename($image['name'], $ext), photos_check_path($scheme, '', $account));
          if ($temp_file = file_save_data($zip->getFromIndex($x), $path)) {
            // Get image info.
            $image_info = Drupal::service('image.factory')->get($temp_file->uri);
            // Update file values.
            $temp_file->pid = $value->pid;
            $temp_file->nid = $value->nid;
            // Use image file name as title.
            $temp_file->title = $image['name'];
            $temp_file->des = $value->des;
            // Prepare file entity.
            $file = $temp_file;
            // Save image.
            if ($file_fid = _photos_save_data($file)) {
              if (photos_image_date($file)) $file_count++;
            }
          }
        }
      }
      $zip->close();
      // Delete zip file.
      file_unmanaged_delete($source);
    }
    else {
      drupal_set_message(t('Compressed file does not exist, please try again: @src', array('@src' => $source)), 'warning');
    }
  }

  return $file_count;
}

/**
 * Write files.
 */
function _photos_save_data($file, $val = array()) {
  $errors = array();
  foreach ($val as $function => $args) {
    array_unshift($args, $file);
    $errors = array_merge($errors, call_user_func_array($function, $args));
  }
  if (!empty($errors)) {
    $message = t('The selected file %name could not be uploaded.', array('%name' => $file->filename));
    if (count($errors) > 1) {
      $message .= '<ul><li>' . implode('</li><li>', $errors) . '</li></ul>';
    }
    else {
      $message .= ' ' . array_pop($errors);
    }
    drupal_set_message($message);
    return 0;
  }
  $file->save();

  return $file->id();
}

/**
 * Photos - return image object.
 */
function _photos_check_image($fid) {
  $image = db_select('photos_image', 'p')
    ->fields('p')
    ->condition('p.fid', $fid)
    ->execute()->fetchObject();
  return $image;
}

/**
 * Photos - return node title.
 */
function _photos_node_title($nid) {
  return db_query('SELECT title FROM {node_field_data} WHERE nid = :nid', array(':nid' => $nid))->fetchField();
}

/**
 * Photos - return url.
 */
function _photos_l($path, $style_name = 'thumbnail') {
  $image_url = '';
  if ($style_name == 'original') {
    $image_styles = image_style_options(FALSE);
    if (isset($image_styles['original'])) {
      $image_url = image_style_url($style_name, $path);
    }
    else {
      $image_url = file_create_url($path);
    }
  }
  else {
    $image_url = image_style_url($style_name, $path);
  }

  return $image_url;
}

/**
 * Handles JSON for slideshow plugin(s).
 */
function _photos_json($type, $v) {
  if ($type == 'en') {
    return \Drupal\Component\Serialization\Json::encode($v);
  }
  else {
    return \Drupal\Component\Serialization\Json::decode($v);
  }
}

/**
 * Tracks number of albums created and number of albums allowed.
 */
function photos_user_count() {
  $user = \Drupal::currentUser();
  $array = $user->getRoles();
  $t['create'] = photos_get_count('user_album', $user->id());
  // @todo check all roles? See what number is highest.
  // @todo upgrade path? Check D7 role id and convert pnum variables as needed.
  $t['total'] = \Drupal::config('photos.settings')->get('photos_pnum_' . $array[0]) ? \Drupal::config('photos.settings')->get('photos_pnum_' . $array[0]) : 20;

  $t['remain'] = ($t['total'] - $t['create']);
  if ($user->id() <> 1 && $t['remain'] <= 0) {
    $t['rest'] = 1;
  }
  return $t;
}

/**
 * Query helper: sort order and limit.
 */
function _photos_order_value($field, $sort, $limit, $default = 0) {
  // @todo update default to check album default!
  if (!$field && !$sort) {
    $t['order'] = !$default ? array('column' => 'f.fid', 'sort' => 'desc') : $default;
  }
  else {
    if (!$t['order'] = _photos_order_value_change($field, $sort)) {
      $t['order'] = !$default ? array('column' => 'f.fid', 'sort' => 'desc') : $default;
    }
  }
  if ($limit) {
    if (isset($_GET['limit']) && !$show = intval($_GET['limit'])) {
      if ($_GET['destination']) {
        $str = $_GET['destination'];
        if (preg_match('/.*limit=(\d*).*/i', $str, $mat)) $show = intval($mat[1]);
      }
    }
    $t['limit'] = isset($show) ? $show : $limit;
  }

  return $t;
}

/**
 * Extends photos order value.
 */
function _photos_order_value_change($field, $sort) {
  // @note timestamp is deprecated, but may exist
  //  if albums are migrated from a previous version.
  $array = array(
    'weight' => 'p.wid',
    'timestamp' => 'f.fid',
    'created' => 'f.fid',
    'comments' => 'p.comcount',
    'visits' => 'p.count',
    'filesize' => 'f.filesize'
  );
  $array1 = array(
    'desc' => 'desc',
    'asc' => 'asc'
  );
  if (isset($array[$field]) && isset($array1[$sort])) {
    return array(
      'column' => $array[$field],
      'sort' => $array1[$sort]
    );
  }
  else {
    // Default if values not found.
    return array(
      'column' => 'f.fid',
      'sort' => 'desc'
    );
  }
}

/**
 * Returns array of query parameters.
 */
function _photos_pager_get_query() {
  $query = array();
  if (!isset($string)) {
    $query = \Drupal\Component\Utility\UrlHelper::filterQueryParameters($_REQUEST, array_merge(array('limit', 'q', 'page', 'destination'), array_keys($_COOKIE)));
  }

  return $query;
}

/**
 * Limit and sort by links.
 */
function _photos_order_link($arg, $count = 0, $link = 0, $limit = 0) {
  // Get current path.
  $q = $current_path = \Drupal::service('path.current')->getPath();
  $field = array(
    'weight' => t('By weight'),
    'created' => t('By time'),
    'comments' => t('By comments'),
    'visits' => t('By visits'),
    'filesize' => t('By filesize')
  );
  if ($limit) {
    $query = _photos_pager_get_query();
    $links['limit'] = '';
    if (!is_array($limit)) {
      $limit = array(5, 10, 20, 30, 40, 50);
    }
    $limit_query = $query;
    foreach ($limit as $tt) {
      $limit_query['limit'] = $tt;
      $sort = array(
        'query' => $limit_query,
        'attributes' => array(
          'class' => array(
            (isset($_GET['limit']) && $_GET['limit'] == $tt) ? 'orderac' : NULL
          ),
          'rel' => 'nofollow'
        )
      );

      $links['limit'] .= \Drupal::l($tt, Url::fromUri('base:' . $q, $sort));

    }
  }
  $links['count'] = $count;
  $links['link'] = $link ? $link : NULL;
  $links['sort'] = \Drupal::l(t('Default'), Url::fromUri('base:' . $arg, array('attributes' => array('rel' => 'nofollow'))));

  $sort_links = '';
  foreach ($field as $key => $t) {
    if (!isset($_GET['field']) || $_GET['field'] <> $key) {
      $sort = 'desc';
      $class = 'photos_order_desc';
    }
    elseif ($_GET['sort'] == 'desc') {
      $sort = 'asc';
      $class = 'photos_order_desc orderac';
    }
    else {
      $sort = 'desc';
      $class = 'photos_order_asc orderac';
    }
    $field_query = array(
      'sort' => $sort,
      'field' => $key
    );
    if (isset($_GET['limit'])) $field_query['limit'] = \Drupal\Component\Utility\Html::escape($_GET['limit']);
    $sort_links .= \Drupal::l($t, Url::fromUri('base:' . $q, array(
      'query' => $field_query,
      'attributes' => array(
        'class' => array($class),
        'rel' => 'nofollow'
      )
    )));
  }
  if ($sort_links) {
    $links['sort'] = array(
      '#markup' => $sort_links
    );
  }

  return array(
    '#theme' => 'photos_album_links',
    '#links' => $links
  );
}

/**
 * Sort order labels.
 */
function _photos_order_label() {
  return array(
    'weight|asc' => t('Weight - smallest first'),
    'weight|desc' => t('Weight - largest first'),
    'created|desc' => t('Upload Date - newest first'),
    'created|asc' => t('Upload Date - oldest first'),
    'comments|desc' => t('Comments - most first'),
    'comments|asc' => t('Comments - least first'),
    'filesize|desc' => t('Filesize - smallest first'),
    'filesize|asc' => t('Filesize - largest first'),
    'visits|desc' => t('Visits - most first'),
    'visits|asc' => t('Visits - least first')
  );
}

/**
 * Format size selection options.
 */
function _photos_select_size($none = 0) {
  if ($none) $v[] = 'Do not show';
  $info = photos_upload_info(0);
  $v = $info['size'];

  return $v;
}

/**
 * Format size label.
 */
function _photos_labels($sizes = 0) {
  if (!$sizes) {
    $t = photos_upload_info(0);
    $sizes = $t['size'];
  }
  foreach ($sizes as $size) {
    $label[] = $size['style'];
  }

  return $label;
}

/**
 * Photos select sub album.
 */
function _photos_select_sub_album() {
  $t = array();
  $types = node_type_get_names();
  foreach ($types as $type => $name) {
    if (\Drupal::config('photos.settings')->get('photos_node_' . $type)) {
      $t[] = $type;
    }
  }

  return $t;
}

/**
 * Implements hook_filter_info().
 */
function photos_filter_info() {
  $filters['filter_photos'] = array(
    'title' => t('Insert image and album'),
    'description' => t('photos.module filter format, at the node to insert images or albums. e.g: [photo=image]id=55,54,53,52|align=right[/photo] or [photo=album]id=134[/photo] or [photo=album]id=134|limit=6[/photo].'),
    'process callback' => 'photos_filter_process',
    'tips callback'  => '_photos_filter_tips',
  );
  return $filters;
}

/**
 * Photos filter tips.
 */
function _photos_filter_tips($filter, $format, $long = FALSE) {
  switch ($long) {
    case 0:
      return t('Insert an image: [photo=image]id=55[/photo], Insert multiple images: [photo=image]id=55,56,57,58[/photo], Insert album: [photo=album]id=10[/photo].');
    case 1:
      // @todo render item_lists?
      $t = '<h2>' . t('Insert image and album') . '</h2>';
      $item[] = t('Insert an image: [photo=image]id=55[/photo].');
      $item[] = t('Insert multiple images: [photo=image]id=55,56,57,58,59[/photo].');
      $item[] = t('Optional attributes: align, e.g: [photo=image]id=55|align=left[/photo] or [photo=image]id=55,56,57|align=right[/photo].');
      $t1 = array(
        '#theme' => 'item_list',
        '#items' => $item,
        '#title' => t('Insert image')
      );

      $item = array();
      $item[] = t('Insert album: [photo=album]id=10[/photo].The default display album cover. You can change, please configure the "limit" property.');
      $item[] = t('Optional attributes: align or limit, e.g: [photo=album]id=10|align=left[/photo] or [photo=album]id=10|align=right|limit=5[/photo].');
      $t2 = array(
        '#theme' => 'item_list',
        '#items' => $item,
        '#title' => t('Insert album')
      );

      // @todo photos.share route and page.
      // $share_url = \Drupal::l(t('Click to here'), Url::fromRoute('photos.share'));

      $t .= t('This is similar to bbcode, do not seem friendly, You can try visualization interface: !url', array('!url' => $share_url));
      return $t;
  }
}

/**
 * Photos filter process.
 */
function photos_filter_process($text) {
  $text = ' ' . $text . ' ';
  $text = preg_replace_callback('/\[photo=(.*?)\](.*?)\[\/photo\]/ms', '_photos_filter_process', $text);
  $text = \Drupal\Component\Utility\Unicode::substr($text, 1, -1);
  return $text;
}

/**
 * Expands on photos filter process.
 */
function _photos_filter_process($mat) {
  $value = '';
  if ($mat[1] == 'image' || $mat[1] == 'album') {
    $align = array('left' => 'photos_filter_left', 'right' => 'photos_filter_right', 'center' => 'photos_filter_center');
    $array = explode('|', $mat[2]);
    if (is_array($array)) {
      foreach ($array as $setting) {
        $t = explode('=', $setting);
        $set[$t[0]] = $t[1];
      }
    }
    $sizes = photos_upload_info(0);
    $style_name = '';
    if (isset($set['label'])) {
      $styles = array();
      // Check photos style label.
      foreach ($sizes['size'] as $size) {
        $styles[$size['name']] = $size['style'];
      }
      if (isset($styles[$set['label']])) {
        $style_name = $styles[$set['label']];
      }
      else {
        $styles = array();
        // Fall back on style id.
        foreach ($sizes['size'] as $size) {
          $styles[$size['style']] = $size['name'];
        }
        if (isset($styles[$set['label']])) {
          $style_name = $styles[$set['label']];
        }
      }
    }
    $set['link'] = 1;
    if ($set['id']) {
      if (preg_match('/[^\d,]/i', $set['id'])) {
        return;
      }
      elseif (!strstr($set['id'], ',')) {
        if ($mat[1] == 'image') {
          $set['style_name'] = $style_name;
          $value = photos_get_info($set['id'], 0, $set);
        }
        else {
          $album = db_select('photos_album', 'p')
            ->fields('p', array('pid', 'fid'))
            ->condition('p.pid', $set['id'])
            ->execute()->fetchObject();
          if (!empty($album->pid)) {
            if (isset($set['limit']) && intval($set['limit']) == $set['limit']) {
              $limit = ($set['limit'] > 10) ? 10 : $set['limit'];
              $query = db_select('file_managed', 'f');
              $query->join('photos_image', 'p', 'p.fid = f.fid');
              $query->fields('f', array('fid', 'uri', 'filename'))
                ->condition('p.pid', $album->pid)
                ->orderBy('f.fid', 'DESC')
                ->range(0, $limit);
              $result = $query->execute();
              foreach ($result as $image) {
                $set['style_name'] = $style_name;
                $value .= photos_get_info(0, $image, $set);
              }
            }
            elseif ($album->fid) {
              $set['link'] = 0;
              $set['href'] = 'photos/album/' . $album->pid;
              $set['style_name'] = $style_name;
              $value = photos_get_info($album->fid, 0, $set);
            }
            else {
              $set['link'] = 0;
              $set['href'] = 'photos/album/' . $album->pid;
              $query = db_select('file_managed', 'f');
              $query->join('photos_image', 'p', 'p.fid = f.fid');
              $query->fields('f', array('fid', 'uri', 'filename'))
                ->condition('p.pid', $album->pid)
                ->orderBy('f.fid', 'DESC');
              $image = $query->execute()->fetchObject();
              $set['style_name'] = $style_name;
              $value = photos_get_info(0, $image, $set);
            }
          }
        }
      }
      elseif ($mat[1] == 'image') {
        $in_set_ids = explode(',', $set['id']);
        $result = db_select('file_managed', 'f')
          ->fields('f', array('fid', 'uri', 'filename'))
          ->condition('f.fid', $in_set_ids, 'IN')
          ->execute();
        foreach ($result as $image) {
          $set['style_name'] = $style_name;
          $value .= photos_get_info(0, $image, $set);
        }
      }
      if ($value) {
        $set_align = isset($set['align']) ? $set['align'] : '';
        $output = isset($align[$set_align]) ? '<div class="' . $align[$set_align] . '">' : '';
        $output .= $value;
        $output .= isset($align[$set_align]) ? '</div>' : '';
        return $output;
      }
    }
  }
}

/**
 * Implements hook_views_data().
 */
function photos_views_data() {
  $data = array();
  $data['photos_album'] = array();
  $data['photos_album']['table'] = array();
  $data['photos_album']['table']['group'] = t('Photos');
  $data['photos_album']['table']['provider'] = 'photos';

  // Join node_field_data.
  $data['photos_album']['table']['join'] = array(
    'node_field_data' => array(
      'left_field' => 'nid',
      'field' => 'pid',
    ),
    'photos_image' => array(
      'left_field' => 'pid',
      'field' => 'pid',
    ),
  );

  // File ID table field.
  $data['photos_album']['fid'] = array(
    'title' => t('Album cover'),
    'help' => t('The album cover image.'),
    'field' => array(
      'id' => 'photos_image'
    ),
    'sort' => array(
      'id' => 'standard'
    ),
    'filter' => array(
      'id' => 'boolean',
      'label' => t('Has cover'),
      'type' => 'yes-no',
    ),
    // Define a relationship to the {file_managed} table.
    'relationship' => array(
      'id' => 'standard',
      'base' => 'file_managed',
      'entity type' => 'file',
      'base field' => 'fid',
      'label' => t('Cover'),
      'title' => t('The cover associated with this album.'),
      'help' => t('Access to the file associated with the cover of this Album.'),
    ),
  );

  // Album weight.
  $data['photos_album']['wid'] = array(
    'title' => t('Album weight'),
    'help' => t('The weight of this album.'),
    'field' => array(
      'id' => 'numeric'
     ),
    'filter' => array(
      'id' => 'numeric',
    ),
    'sort' => array(
      'id' => 'standard',
    ),
  );

  // Album image count.
  $data['photos_album']['count'] = array(
    'title' => t('Album image count'),
    'help' => t('The number of images in this album.'),
    'field' => array(
      'id' => 'numeric'
     ),
    'filter' => array(
      'id' => 'numeric',
    ),
    'sort' => array(
      'id' => 'standard',
    ),
  );

  $data['photos_image'] = array();
  $data['photos_image']['table'] = array();
  $data['photos_image']['table']['group'] = t('Photos');
  $data['photos_image']['table']['provider'] = 'photos';

  // Join album info to images.
  $data['photos_image']['table']['join'] = array(
    'file_managed' => array(
      'left_field' => 'fid',
      'field' => 'fid',
    ),
    'node_field_data' => array(
      'left_field' => 'nid',
      'field' => 'pid',
    ),
    'photos_album' => array(
      'left_field' => 'pid',
      'field' => 'pid',
    ),
  );

  // File ID table field.
  $data['photos_image']['fid'] = array(
    'title' => t('Image'),
    'help' => t('Album image.'),
    'field' => array(
      'id' => 'photos_image'
    ),
    'sort' => array(
      'id' => 'standard',
    ),
    'relationship' => array(
      'id' => 'standard',
      'base' => 'file_managed',
      'entity type' => 'file',
      'base field' => 'fid',
      'label' => t('Image file'),
      'title' => t('The file associated with this image.'),
      'help' => t('Access to the file information associated with this image.'),
    ),
  );

  // Image title.
  $data['photos_image']['des'] = array(
    'title' => t('Image description'),
    'help' => t('The description for this image.'),
    'field' => array(
      'id' => 'standard'
    ),
    'sort' => array(
      'id' => 'standard',
    ),
    'filter' => array(
      'handler' => 'string',
    ),
  );
/*
  // Image description.
  $data['photos_image']['title'] = array(
    'title' => t('Image description'),
    'help' => t('The description for this image.'),
    'area' => array(
      'id' => 'text',
    ),
    'filter' => array(
      'id' => 'boolean',
      'label' => t('Has Description'),
      'type' => 'yes-no',
    ),
  );*/

  // Image weight.
  $data['photos_image']['wid'] = array(
    'title' => t('Image weight'),
    'help' => t('The image weight - custom sort order.'),
    'field' => array(
      'id' => 'numeric'
     ),
    'filter' => array(
      'handler' => 'numeric'
    ),
    'sort' => array(
      'handler' => 'standard'
    ),
  );

  // Image views count.
  $data['photos_image']['count'] = array(
    'title' => t('Image views'),
    'help' => t('Number of times this image has been viewed.'),
    'field' => array(
      'id' => 'numeric'
     ),
    'filter' => array(
      'handler' => 'numeric',
    ),
    'sort' => array(
      'handler' => 'standard',
    ),
  );

  // Image comment count.
  $data['photos_image']['comcount'] = array(
    'title' => t('Image comments'),
    'help' => t('Number of comments this image has.'),
    'field' => array(
      'id' => 'numeric'
     ),
    'filter' => array(
      'handler' => 'numeric'
    ),
    'sort' => array(
      'handler' => 'standard'
    ),
  );

  return $data;
}

/**
 * Implements hook_search_info().
 *
 * Enables searches of the Titles and Descriptions of photos within Photo Albums.
 *
 * Normal searches (via the Content tab) only search the album page and
 * comments, but not each title & description.  This extension presents
 * thumbnails of matching photos and clicking on them takes the user
 * directly to /photos/image/fid
 *
 */
function photos_search_info() {
  return array('title' => 'Photos' ) ;
}

/**
 * Implements hook_search_execute().
 */
function photos_search_execute($keys = NULL, $conditions = NULL) {
  $query = db_select('search_index', 'i',
    array('target' => 'slave'))->extend('SearchQuery')->extend('Drupal\Core\Database\Query\PagerSelectExtender')->limit(10);

  // only want photos, not nodes of any kind
  $query->condition('i.type', 'photos');
  $query->leftJoin('search_dataset', 'sd', 'i.sid = sd.sid');
  $query->condition('sd.reindex', '=0');
  $query->searchExpression($keys, 'photos');

  if (!$query->executeFirstPass()) {
    // Only continue if the first pass query matches.
    return array();
  }

  // if we do NOT get here: problem with query?
  $query->addTag('node_access');
  $query->fields('i', array('word', 'type', 'score'));
  $query->leftJoin('photos_image', 'pi', 'pi.fid = i.sid');
  $query->fields('pi', array('fid', 'pid', 'des', 'title', 'wid', 'count'));
  $query->orderBy('pi.wid', 'ASC');
  $query->leftJoin('photos_album', 'pa', 'pa.pid = pi.pid');
  $query->leftJoin('node_field_data', 'n', 'n.nid = pa.pid');
  $query->fields('n', array('title', 'uid', 'language'));
  $query->join('file_managed', 'fm', 'fm.fid = pi.fid');
  $query->fields('fm', array('filesize', 'created', 'uid', 'filename', 'uri'));

  // Load results.
  $found = $query->execute();

  $user = \Drupal::currentUser();

  $results = array();
  // process each photo found:
  foreach ($found as $item) {
    $node = \Drupal::entityManager()->getStorage('node')->load($item->pid);

    // If user has "bypass node access" then they can view anything, else
    // test if photos_access() is enabled and any permissions required:
    if (!$user->hasPermission('bypass node access')) {
      // test for photos_access enabled
      if (\Drupal::moduleHandler()->moduleExists('photos_access')) {
        // if photo is *not* owned by current user, test for access permissions:
        if (!_photos_access('album', $node)) {
          // next photo...
          continue;
        }
      }
    }

    $thumbnail_src = image_style_url('thumbnail', $item->uri);

    if ($item->filesize > 1024 * 1000) {
      $file_size_sfx = 'MB';
      $file_size = number_format($item->filesize / (1024 * 1000), 1);
    }
    elseif ($item->filesize > 1024) {
      $file_size_sfx = 'KB';
      $file_size = number_format($item->filesize / (1024));
    }
    else {
      $file_size_sfx = 'Bytes';
      $file_size = number_format($item->filesize);
    }
    // Iterate through found photos:
    // @FIXME
// theme() has been renamed to _theme() and should NEVER be called directly.
// Calling _theme() directly can alter the expected output and potentially
// introduce security issues (see https://www.drupal.org/node/2195739). You
// should use renderable arrays instead.
//
//
// @see https://www.drupal.org/node/2195739
// $results[] = array(
//       'link' => url('photos/image/' . $item->sid, array('absolute' => TRUE)),
//       'type' => $item->type, // should always be 'photos',
//       'title' => $item->title,
//       // User and date appear BEFORE extras (thumbnail) - it's ugly-ish.
//       // They've been moved into the extras, after the thumbnail.
//       'user' => '',
//       'date' => '',
//       'extra' => array(
//         'extra1' => '<p><a href="'
//           . url('photos/image/'
//           . $item->sid, array('absolute' => TRUE))
//           . '"><img src="' . $thumbnail_src . '" alt="' . $item->title
//           . '" title="' . check_plain($item->des)
//           . '"  class="photos_search_result"></a> ',
//         'extra2' => 'By ' . theme('username', array('account' => $node))
//           . ' - ' . format_date($item->created, 'short')
//           . ' - ' . $file_size . ' ' . $file_size_sfx . ' ',
//         'extra3' => 'Album: <a href="' . url('photos/album/'
//           . $node->id(), array('absolute' => TRUE))
//           . '" title="Jump to Album">'
//           . check_plain($node->getTitle()) . '</a>',
//         ),
//       'score' => $item->calculated_score,
//       'snippet' => search_excerpt($keys, ' ' . $item->des . ' '),
//       'language' => $item->language == 'und' ? 'en' : $item->language
//     );

  }

  return $results;
}

/**
 * Implements hook_search_access().
 */
function photos_search_access() {
  return \Drupal::currentUser()->hasPermission('search content');
}

/**
 * Implements hook_search_status().
 */
function photos_search_status() {
  $result = _photos_get_photos();
  $total_pics = $result->rowCount();

  $remaining = (int) $total_pics
    - (int) db_query('SELECT COUNT(*) from {search_dataset} AS s WHERE s.type = :type AND s.reindex = 0',
    array(':type' => 'photos'))->fetchField();

  return array(
    "remaining" => $remaining,
    "total" => $total_pics
  );
}

/**
 * Implements hook_update_index().
 */
function photos_update_index() {
  // @FIXME
// // @FIXME
// // This looks like another module's variable. You'll need to rewrite this call
// // to ensure that it uses the correct configuration object.
// $limit = 'LIMIT ' . (int) variable_get('search_cron_limit', 100);

  // @todo this is not configurable, use state?
  $photos_search_max_id_ever =
    (int) \Drupal::config('photos.settings')->get('photos_search_max_id_ever');
  // @FIXME
// // @FIXME
// // This looks like another module's variable. You'll need to rewrite this call
// // to ensure that it uses the correct configuration object.
// $photos_search_max_id_reindex =
//     (int) variable_get(' photos_search_max_id_reindex', 0);


  $wrap = (int) \Drupal::config('photos.settings')->get('photos_search_reindex_old_photos');

  // Fetch new photos, added since last index run:
  $result = _photos_get_photos("WHERE pi.fid > $photos_search_max_id_ever", $limit, $wrap);
  if ($result->rowCount() > 0) {
    foreach ($result as $image) {
      search_index($image->fid, 'photos', '<h1>' . $image->Title . '</h1> ' . $image->des);
      if ($photos_search_max_id_ever <= $image->fid) {
        /*
         We've just indexed a brand-new photo;
         Reset reindex counter to 0 so when reindexing we have to start
         at beginning.
        */
        $photos_search_max_id_ever = $image->fid;
        $photos_search_max_id_reindex = 0;
      }
      else {
        $photos_search_max_id_reindex = $image->fid;
      }
    }
    \Drupal::configFactory()->getEditable('photos.settings')->set('photos_search_max_id_ever', (int) $photos_search_max_id_ever)->save();
    \Drupal::configFactory()->getEditable('photos.settings')->set('photos_search_max_id_reindex', (int) $photos_search_max_id_reindex)->save();
  }
}

/**
 * Implements hook_search_reset().
 */
function photos_search_reset() {
  db_update('search_dataset')
    ->fields(array('reindex' => REQUEST_TIME))
    ->condition('type', 'photos')
    ->execute();

  \Drupal::configFactory()->getEditable('photos.settings')->set('photos_search_max_id_ever', 0)->save();
  \Drupal::configFactory()->getEditable('photos.settings')->set('photos_search_max_id_reindex', 0)->save();
}

/**
 * Get photos that are in albums.
 *
 * Can get all photos (for search status) or a subset of new photos
 * for indexing.
 *
 * Also can "wrap" selection to gather new photos for indexing PLUS
 * oldest photos for re-indexing (using UNION query).
 *
 * @param string $where
 *   (optional) An SQL WHERE clause; usually to grab new photos where
 *   pid > last indexed pid
 * @param string $limit
 *   (optional) A LIMIT clause: for getting status, use no limit, else it's set
 *   to search_cron_limit
 * @param string $wrap
 *   (optional) Indicates whether to make a union query to grab newest photos, THEN
 *   union them with the oldest photos (for re-indexing those).
 *   This behaviour is controlled on the /admin/config/search/settings
 *   page.
 * @returns array of DB records containing info on photos.
 */
function _photos_get_photos($where = 'WHERE 1 = 1', $limit = NULL, $wrap = '') {
  $photos_search_max_id_reindex = (int) \Drupal::config('photos.settings')->get('photos_search_max_id_reindex');

  // If "wrap around past newest photo" is TRUE, then
  // a) grab new photos
  // b) grab photos NEWER than last reindex run
  // c) also grab oldest photos with lowest pid numbers (starting with 1)
  // So if 10 new photos have been added, making total 210, and re-indexed
  // number 190 already, get 201-210, 191-200, 1-80.

  // Titles and descriptions can (and do) change.
  if ($wrap !== '') {
    // UNION newest NOT RE-INDEXED...
    $wrap = "UNION DISTINCT "
      . "SELECT pi.fid, pi.des, pi.title AS Title, n.title AS AlbumTitle "
      . "FROM {photos_image} AS pi "
      . "LEFT JOIN {file_managed} AS fm ON fm.fid = pi.fid "
      . "LEFT JOIN {photos_album} AS pa ON pi.pid = pa.pid  "
      . "LEFT JOIN {node_field_data} AS n ON n.nid = pa.pid "
      . "WHERE pi.fid > $photos_search_max_id_reindex "
      // UNION again, from OLDEST ever uploaded
      . "UNION DISTINCT "
      . "SELECT pi.fid, pi.des, pi.title AS Title, n.title AS AlbumTitle "
      . "FROM {photos_image} AS pi "
      . "LEFT JOIN {file_managed} AS fm ON fm.fid = pi.fid "
      . "LEFT JOIN {photos_album} AS pa ON pi.pid = pa.pid  "
      . "LEFT JOIN {node_field_data} AS n ON n.nid = pa.pid "
      . "WHERE pi.fid > 0 ";
  }

  // Grab all photos available, depending on criteria passed as arguments:
  $sql = "SELECT pi.fid, pi.des, pi.title AS Title, n.title AS AlbumTitle "
    . "FROM {photos_image} AS pi "
    . "LEFT JOIN {file_managed} AS fm ON fm.fid = pi.fid "
    . "LEFT JOIN {photos_album} AS pa ON pi.pid = pa.pid  "
    . "LEFT JOIN {node_field_data} AS n ON n.nid = pa.pid "
    . "$where "
    . $wrap
    . " $limit ";

  $result = db_query($sql);

  return $result;
}

/**
 * Implements hook_search_admin().
 */
function photos_search_admin() {
  $form['photos_search_admin'] = array(
    '#type' => 'fieldset',
    '#title' => t('Administer Photos Search Module'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#tree' => FALSE,
    '#action' => 'photos_search_admin_submit',
    '#access' => \Drupal::currentUser()->hasPermission('administer search'),
    '#weight' => 20,
  );

  $form['photos_search_admin']['photos_search_reindex_old_photos'] = array(
    '#title' => t('Reindex Old Photos'),
    '#description' => t('Control whether or not to reindex old
      photos.  If true, once all new photos are indexed, the
      process starts over with the oldest photos.  This catches
      any changes to titles or descriptions post original indexing.'),
    '#type' => 'radios',
    '#options' => array('Reindex old photos',
      'Do not reindex old photos'),
    '#default_value' => \Drupal::config('photos.settings')->get('photos_search_reindex_old_photos'),
    '#required' => FALSE,
    '#disabled' => FALSE,
  );

  return $form;
}
